<?xml version="1.0" encoding="UTF-8"?>

<project name="cobertura.examples.basic" default="coverage" basedir=".">
	<tstamp>
		<format property="current.date" pattern="MM-dd-yyyy" locale="en" />
	</tstamp>

	<property file="build_coverage.properties" />

	<path id="pac_classpath">
			<fileset dir="${cobertura.dir}">
				<include name="cobertura.jar" />
			</fileset>
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<!-- exclude name="**/asm*.jar" / -->
			</fileset>
			<fileset dir="${pac.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
	</path>

	<taskdef classpathref="pac_classpath" resource="tasks.properties" />

	<target name="clean-all" description="Remove all files created by the build/test process.">
		<delete dir="${instrumented.dir}" />
		<delete dir="${reports.dir}" />
		<delete dir="${coverage.dir}" />
		<delete file="cobertura.log" />
		<delete file="cobertura.ser" />
	</target>

	<target name="clean-pentaho-instrumented-classes">
		<!--
			Remove the coverage data file and any old instrumentation.
		-->
		<delete file="cobertura.ser" />
		<delete dir="${instrumented.dir}" />
	</target>

	<target name="clean-pentaho-test-reports">
		<delete dir="${reports.dir}" />
	</target>

	<target name="clean-pentaho-coverage-reports">
		<delete dir="${coverage.dir}" />
	</target>

	<target name="init-instrument-pentaho-classes" depends="clean-pentaho-instrumented-classes">
		<mkdir dir="pentaho-instrumented-classes" />
	</target>

	<target name="init-pentaho-test-reports" depends="clean-pentaho-test-reports">
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />		

		<copy todir="${instrumented.dir}/org/pentaho/pac/locale">
			<fileset dir="${src.dir}/org/pentaho/pac/locale" />
		</copy>

		<copy todir="${instrumented.dir}">
			<fileset file="${src.dir}/org/pentaho/pac/server/common/hibernate.cfg.xml" />
		</copy>

		<copy todir="${instrumented.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.hbm.xml" />
			</fileset>
		</copy>
	</target>

	<target name="init-pentaho-coverage-reports" depends="clean-pentaho-coverage-reports">
		<mkdir dir="${coverage.xml.dir}" />
		<mkdir dir="${coverage.html.dir}" />
	</target>

	<target name="compile" unless="pentaho.compiled">
		<javac destdir="${classes.dir}" debug="yes" source="1.5" target="1.5" fork="true">
			<src path="${src.dir}" />
			<src path="${test.src.dir}" />
			<classpath refid="pac_classpath" />
		</javac>
	</target>

	<target name="instrument-pentaho-classes" depends="init-instrument-pentaho-classes">
		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
		<cobertura-instrument todir="${instrumented.dir}" datafile="cobertura.ser">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.pentaho.logging.*" />

			<fileset dir="${classes.dir}">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>

	</target>

	<target name="test" depends="init-pentaho-test-reports">
		<echo message="solution.path=[${solution.path}]"/>
		<echo message="lib.path=[${lib.path}]"/>

		<junit fork="yes" dir="${basedir}" failureProperty="test.failed" showoutput="no">
			<!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
			<classpath location="${instrumented.dir}" />
			<classpath location="${classes.dir}" />

			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<classpath refid="pac_classpath" />

			<!--
				JVM parameters that specify the proper paths to the TestSettings class
			-->
			<jvmarg value="-DSOLUTION_PATH=${solution.path}"/>
			<jvmarg value="-DTHIRD_PARTY_LIB_PATH=${lib.path}"/>

			<formatter type="xml" />
			<test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
			<batchtest todir="${reports.xml.dir}" unless="testcase">
				<fileset dir="${test.src.dir}">
					<include name="**/*Test.java" />
					<exclude name="**/BaseTest.java" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>
	</target>

	<target name="coverage-check">
		<cobertura-check branchrate="34" totallinerate="100" />
	</target>

	<target name="coverage-report">
		<!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
	</target>

		<target name="csv-coverage-report">
			<!--
				Generate an CSV file containing the coverage data using
				the "srcdir" attribute.
			-->
			<cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="csv" />
		</target>

	<target name="alternate-coverage-report">
		<!--
			Generate a series of HTML files containing the coverage
			data in a user-readable form using nested source filesets.
		-->
		<cobertura-report destdir="${coverage.html.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>
	
	<target name="zip-reports">
		<mkdir dir="${dist.dir}"/>
		<zip destfile="${dist.dir}/open-source-reports-${current.date}.zip">
			<zipfileset dir="${reports.dir}" prefix="opensource-tests" />
			<zipfileset dir="${coverage.dir}" prefix="opensource-coverage" />
		</zip>
	</target>

	<target name="coverage" depends="instrument-pentaho-classes,test,coverage-report,csv-coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports." />

</project>
