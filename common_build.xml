<!--===========================================================================
    COMMON_BUILD.XML
    
    This is the build file that is used across all Pentaho projects that are
    using the "new and improved" ivy builds.
    
    This file contains the default implementation of the ant tasks to 
    perform a build. This file should be included by the build.xml file 
    for each project in the Pentaho system. That build file should 
    redefine any task that is defined in this file IF AND ONLY IF the 
    functioning of that task should be different for that specific
    project.
    
    NOTE: Any modification to this file should be viewed as a modification
          the EVERY common_build.xml file (and the change should be copied
          to all common_build.xml files that can be found)
    
    FORMATTING: 
    	ALIGNMENT: indent=2 spaces and wrap lines longer than 120 chars
    	NAMING: targets intended for execution by a user are named single-word
    	        or hyphenated.  Internal targets use '.' notation.
    
    TO GET STARTED with your project, you will need this file in 
          your project's root directory along with three additional files:
          1. build.xml 
          2. build.properties
          3. ivy_settings.xml
          4. ivy.xml
          
          Below are some templates:
          
	    === build.xml
		<project name="MyProject" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >
			<description>
				This build file is used to create the MyProject project and works with the common_build.xml file.
			</description>

			<import file="common_build.xml"/>
		</project>
	
		=== build.properties
		project.revision=1.0-SNAPSHOT  #the version of your project.  This will appear in jar META-INF, dist artifact filenames and IVY revision metadata. 
		ivy.artifact.id=my-project   #IVY metadata describing the name of the artifact
		impl.title=My Project #English language version of your project name
		
============================================================================-->
<project name="Pentaho Common Build" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Load the properties files in the proper order -->
  <property file="override.properties"
            description="Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="build.properties"
            description="Properties customized for your particular project belong in this file." />

  <!-- =================================================================================
	     Property Defaults
	     Any of these properties can be overridden in either build.properties or override.properties
	     =================================================================================-->

  <!-- Project meta properties -->
  <property name="impl.vendor"
            value="Pentaho Corporation"
            description="Jar file metadata describing the jar's vendor" />
  <property name="impl.productID"
            value=""
            description="Jar file metadata indicating the product ID (this is not the revision)" />

  <!-- Compile properties -->
  <property name="src.dir" value="${basedir}/src" description="Project source code directory" />
  <property name="bin.dir" value="${basedir}/bin" description="Base directory for all non-dist build output" />
  <property name="classes.dir"
            value="${bin.dir}/classes"
            description="Classes compiled from project source code are placed here" />
  <property name="lib.dir"
            value="${basedir}/lib"
            description="Directory that hosts Jar files required to compile project source.  (IVY will populate this directory with required jars)" />
  <property name="devlib.dir"
            value="${basedir}/dev-lib"
            description="Directory for developer to place development Jar files (not affected by clean targets)" />

  <!-- Compiler properties (passed directly to javac ant target) -->
  <property name="javac.debug"
            value="true"
            description="Indicates whether source should be compiled with debug information (passed to javac ant task)." />
  <property name="javac.deprecation"
            value="true"
            description="Indicates whether source should be compiled with deprecation information" />
  <property name="javac.source" value="1.5" description="Provide source compatibility with specified release" />
  <property name="javac.target" value="1.5" description="Generate class files for specific VM version" />

  <!-- Build Cache properties -->
  <property name="build.cache.dir"
            value="${user.home}/.pentaho_build_cache"
            description="Base dir for runtime jars that are required exclusively by the build process" />
  <property name="tmp.build.cache.dir"
            value="${build.cache.dir}/tmp"
            description="Temporary directory where files are prepared for build cache" />
  <property name="ivy.build.cache.dir"
            value="${build.cache.dir}/ivy"
            description="Directory where the IVY jar is placed after it is auto downloaded by the build" />
  <property name="cobertura.build.cache.dir"
            value="${build.cache.dir}/cobertura"
            description="Directory where the Cobertura jar (and dependencies) is placed after it is auto-downloaded by the build" />
  <property name="antcontrib.build.cache.dir"
            value="${build.cache.dir}/ant-contrib"
            description="Directory where the Ant-Contrib jar (and dependencies) is placed after it is auto-downloaded by the build" />
  <property name="pentaho.build.cache.dir"
            value="${build.cache.dir}/pentaho"
            description="Directory where the Pentaho ant tasks jar (and dependencies) is placed after it is auto-downloaded by the build" />
  <property name="svnant.build.cache.dir"
            value="${build.cache.dir}/svnant"
            description="Directory where the SVN ANT install is placed after it is auto downloaded by the build" />

  <!-- SVN Ant Properties -->
  <property name="svnant.url"
            value="http://subclipse.tigris.org/files/documents/906/43359/svnant-1.2.0-RC1.zip"
            description="The URL to the current release of SVN Ant" />
  <property name="svnant.use-javahl"
            value="false"
            description="Prefer JNI JavaHL binding over the command line client for native svn support" />
  <property name="svnant.use-svnkit"
            value="true"
            description="Prefer SVNKit binding over the command line client for native svn support (defaults to true)" />

  <!-- Test properties -->
  <property name="testsrc.dir" value="${basedir}/test-src" description="Directory that hosts the test source files" />
  <property name="testlib.dir"
            value="${basedir}/test-lib"
            description="Directory for jar files needed during unit testing" />
  <property name="testbin.dir" value="${bin.dir}/test" description="Base directory for all test output" />
  <property name="testclasses.dir"
            value="${testbin.dir}/classes"
            description="Classes compiled from project test code are placed here" />
  <property name="testreports.dir"
            value="${bin.dir}/reports/test"
            description="Base directory that holds all unit test report files" />
  <property name="testreports.xml.dir"
            value="${testreports.dir}/xml"
            description="Unit test xml reports are placed here" />
  <property name="testreports.html.dir"
            value="${testreports.dir}/html"
            description="Unit test html reports are placed here" />
  <property name="junit.haltonfailure" value="no" description="Fail the build if a test fails" />

  <!-- Code Coverage properties -->
  <property name="instrumented.classes.dir"
            value="${testbin.dir}/instrumented-classes"
            description="Directory where instrumented project classes are placed for use by code coverage utility" />
  <property name="cobertura.data.dir"
            value="${testbin.dir}/cobertura-bin"
            description="Temporary data directory used by Cobertura" />
  <property name="coberturareports.dir"
            value="${bin.dir}/reports/cobertura"
            description="Base directory for all generated Cobertura code coverage reports" />
  <property name="coberturareports.xml.dir"
            value="${coberturareports.dir}/xml"
            description="Cobertura xml reports are placed here" />
  <property name="coberturareports.html.dir"
            value="${coberturareports.dir}/html"
            description="Cobertura html reports are placed here" />

  <!-- Javadoc properties -->
  <property name="javadoc.dir"
            value="${bin.dir}/javadoc"
            description="Directory where generated javadoc will be placed" />
  <property name="javadoc.packagenames"
            value="org.pentaho.*"
            description="This property is passed to the packagenames property of the javadoc ant task.  You should customize this for your project." />

  <!-- Distribution and Assembly properties -->
  <property name="dist.dir"
            value="${basedir}/dist"
            description="Base directory for all project artifacts (jar, zip, tar.gz, etc...)" />
  <property name="license.dir"
            value="${basedir}"
            description="Base directory where this project's license files reside" />
  <property name="res.dir"
            value="${basedir}/res"
            description="Directory that holds resources not included in the source tree" />

  <!-- Ivy properties -->
  <property name="ivy.install.version" value="2.0.0-beta2" description="Specifies the version of IVY to fetch" />
  <property name="ivy.jar.file"
            value="${ivy.build.cache.dir}/ivybeta1.jar"
            description="The full path to the IVY jar file to use during the build.  If the file is not present, the build will attempt to fetch IVY and save the jar as specified by this property" />
  <property name="ivy.settingsurl"
            value="file:${basedir}/ivysettings.xml"
            description="URL to the (common) ivysettings.xml.  This file is required by the build to configure IVY.  Note you must escape the ':' if this property exists in a .properties file" />
  <property name="ivy.artifact.group"
            value="pentaho"
            description="IVY metadata describing the originating company or organization" />
  <property name="ivy.artifact.pomfile"
            value="${dist.dir}/pom.xml"
            description="The path to the Maven pom file to deploy with the artifact" />
  <property name="ivy.artifact.ivyfilename"
            value="ivy.xml"
            description="The name of the IVY xml file to deploy with the artifact" />
  <property name="ivy.artifact.ivypathname"
            value="${dist.dir}/ivy.xml"
            description="The full path to the IVY xml file to deploy with the artifact" />

  <!-- Set the os property -->
  <condition property="isLinux">
    <os family="unix" />
  </condition>
  <condition property="isWindows">
    <os family="windows" />
  </condition>
  <condition property="isMac">
    <os family="mac" />
  </condition>

  <condition property="os.classifier" value="win">
    <os family="windows" />
  </condition>
  <condition property="os.classifier" value="mac">
    <os family="mac" />
  </condition>
  <condition property="os.classifier" value="linux">
    <os family="unix" />
  </condition>
  <property name="os.classifier" value="unsupported" />

  <!-- Setup the compile classpath -->
  <path id="classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${devlib.dir}">
      <include name="*.jar" />
    </fileset>
  </path>

  <!-- Setup the classpath used for testing -->
  <path id="test.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${testlib.dir}">
      <include name="*.jar" />
    </fileset>
    <dirset dir="${classes.dir}" />
    <dirset dir="${testclasses.dir}" />
  </path>


  <!--=======================================================================
	    install-antcontrib
	    
	    (Fetches and) installs ant-contrib tasks.
	    ====================================================================-->
  <target name="install-antcontrib"
          depends="antcontrib.download-check"
          description="Fetch ant-contrib jar and install ant tasks">
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <fileset dir="${antcontrib.build.cache.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </taskdef>
  </target>


  <!--=======================================================================
	    antcontrib.download-check
	    
	    Fetches ant-contrib from sourceforge if it is not already present
	    ====================================================================-->
  <target name="antcontrib.download-check">
    <condition property="antcontrib.available">
      <and>
        <available file="${antcontrib.build.cache.dir}" />
        <available classname="net.sf.antcontrib.logic.IfTask">
          <classpath>
            <fileset dir="${antcontrib.build.cache.dir}">
              <include name="*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="antcontrib.download" />
  </target>


  <!--=======================================================================
	    antcontrib.download
	    
	    Fetches ant-contrib from sourceforge
	    ====================================================================-->
  <target name="antcontrib.download" unless="antcontrib.available">
    <mkdir dir="${tmp.build.cache.dir}" />
    <get src="http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b3-bin.zip"
         dest="${tmp.build.cache.dir}/antcontrib.zip"
         usetimestamp="true" />
    <unzip src="${tmp.build.cache.dir}/antcontrib.zip" dest="${tmp.build.cache.dir}">
      <patternset>
        <include name="**/*.jar" />
      </patternset>
    </unzip>
    <copy todir="${antcontrib.build.cache.dir}">
      <fileset dir="${tmp.build.cache.dir}/ant-contrib">
        <include name="**/*.jar" />
      </fileset>
    </copy>
  </target>


  <!--=======================================================================
	    init
	    
	    Ensures that all the required directories exist before processing
	    a build.
	    ====================================================================-->
  <target name="init" description="Initializes the build process">
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${devlib.dir}" />
    <mkdir dir="${testlib.dir}" />
  </target>

  <!--=======================================================================
	    svnant.download-check
	    
	    Fetch SVN ANT zip if it is not already present
	    ====================================================================-->
  <target name="svnant.download-check">
    <condition property="svnant.available">
      <and>
        <available file="${svnant.build.cache.dir}" />
        <available classname="org.tigris.subversion.svnant.SvnTask">
          <classpath>
            <fileset dir="${svnant.build.cache.dir}">
              <include name="**/*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="svnant.download" />
  </target>


  <!--=======================================================================
      svnant.download
    
      Downloads the IVY jar file for use by ant.
      ====================================================================-->
  <target name="svnant.download" unless="svnant.available">
    <mkdir dir="${svnant.build.cache.dir}" />
    <get src="${svnant.url}" dest="${svnant.build.cache.dir}/svnant.zip" usetimestamp="true" />
    <unzip src="${svnant.build.cache.dir}/svnant.zip" dest="${svnant.build.cache.dir}">
      <patternset>
        <include name="**/*.jar" />
      </patternset>
    </unzip>
  </target>


  <!--=======================================================================
    install-svnant
    
    (Fetches and) installs the SVN ANT for use by this ant script
    ====================================================================-->
  <target name="install-svnant"
          depends="install-antcontrib, svnant.download-check"
          description="Installs SVN ANT tasks for use by this build process">
    <if>
      <istrue value="${svnant.isinstalled}" />
      <then>
        <echo message="Skipping SVN ANT install.  IVY has already been configured by the build" />
      </then>
      <else>
        <echo message="Installing SVN ANT..." />
        <path id="svnant.lib.path">
          <fileset dir="${svnant.build.cache.dir}" includes="**/*.jar" />
        </path>
        <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.lib.path" />
        <property name="svnant.isinstalled" value="true" />
      </else>
    </if>
  </target>


  <!--=======================================================================
        test-svnant
    
        Tests SVN by printing out the repository
        ====================================================================-->
  <target name="test-svnant" depends="install-svnant">
    <svn javahl="${svnant.use-javahl}" svnkit="${svnant.use-svnkit}">
      <wcVersion path="." />
    </svn>
    <echo message="Subversion repository url: ${repository.url}" />
  </target>


  <!--=======================================================================
        svn-revision
    
        Tests SVN by printing out the repository
        ====================================================================-->
  <target name="svn-revision"
          depends="install-svnant"
          description="Prints and sets the SVN revision for the repository at the current dir">

    <svn javahl="${svnant.use-javahl}" svnkit="${svnant.use-svnkit}">
      <status path="." revisionProperty="svn.revision" />
    </svn>
    <echo message="Subversion repository revision: ${svn.revision}" />
  </target>


  <!--=======================================================================
	    install-ivy
	    
	    (Fetches and) installs the IVY jar for use by this ant script
	    ====================================================================-->
  <target name="install-ivy"
          depends="install-antcontrib,ivy.download-check"
          description="Installs IVY tasks for use by this build process">
    <if>
      <istrue value="${ivy.isinstalled}" />
      <then>
        <echo message="Skipping IVY install.  IVY has already been configured by the build" />
      </then>
      <else>
        <echo message="Installing IVY..." />
        <path id="ivy.lib.path">
          <fileset dir="${ivy.build.cache.dir}" includes="*.jar" />
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
        <ivy:settings url="${ivy.settingsurl}" />
        <property name="ivy.isinstalled" value="true" />
      </else>
    </if>
  </target>


  <!--=======================================================================
	    ivy.download-check
	    
	    Fetch IVY jar from sourceforge if it is not already present
	    ====================================================================-->
  <target name="ivy.download-check">
    <condition property="ivy.available">
      <and>
        <available file="${ivy.build.cache.dir}" />
        <available classname="org.apache.ivy.ant.IvyTask">
          <classpath>
            <fileset dir="${ivy.build.cache.dir}">
              <include name="*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="ivy.download" />
  </target>


  <!--=======================================================================
	    ivy.download
	    
	    Downloads the IVY jar file for use by ant.
	    ====================================================================-->
  <target name="ivy.download" unless="ivy.available">
    <mkdir dir="${ivy.build.cache.dir}" />
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}"
         usetimestamp="true" />
  </target>


  <!--=======================================================================
	    resolve
	    
	    Using ivy and the dependencies for the project (defined in the ivy.xml
	    file), this task will retrieve the needed files and place them into 
	    the defined directories.
	    ====================================================================-->
  <target name="resolve" depends="resolve-default, resolve-test" description="Retrieves all the dependent libraries" />

  <target name="resolve-init" depends="install-ivy" />

  <target name="resolve-default" depends="resolve-init" description="Retrieves default configuration dependencies">
    <ivy:resolve file="ivy.xml" conf="default" />
    <ivy:retrieve conf="default" pattern="${lib.dir}/[module]-[revision].[ext]" />
  </target>

  <target name="resolve-test" depends="resolve-init" description="Retrieves test configuration dependencies">
    <ivy:resolve file="ivy.xml" conf="test" />
    <ivy:retrieve conf="test" pattern="${testlib.dir}/[module]-[revision].[ext]" />
  </target>

  <target name="resolve-codegen" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="codegen" />
    <ivy:retrieve conf="codegen" pattern="${lib.dir}/[module]-[revision].[ext]" />
  </target>

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${lib.dir}/[module]-[revision].[ext]" />
  </target>


  <!--=======================================================================
	    ivy-clean-cache
	    
	    Cleans the IVY cache.  You are erasing IVY's memory.  Run this if you 
	    want to force IVY to go fetch all your project dependencies from scratch.
	    WARNING: this will affect all IVY projects, not just the current workspace
	    ====================================================================-->
  <target name="ivy-clean-cache" depends="install-ivy" description="Cleans the IVY cache">
    <ivy:cleancache />
  </target>


  <!--=======================================================================
	    ivy-clean-local
	    
	    Completely cleans your local repository of any files published locally
	    by way of publish-local.
	    WARNING: this is a global action and will affect other IVY projects
	    currently referencing a locally published dependency
	    ====================================================================-->
  <target name="ivy-clean-local" depends="install-ivy" description="cleans the local repository for the current module">
    <delete dir="${ivy.local.default.root}/" />
  </target>


  <!--=======================================================================
	    report
	    
	    Allows ivy to report on the dependencies for this project 
	    ====================================================================-->
  <target name="report" depends="install-ivy" description="Uses IVY to report on the dependency information">
    <ivy:resolve file="ivy.xml" />
    <ivy:report conf="default" />
  </target>


  <!--=======================================================================
	    publish-local-nojar
	    
	    Publishes the jar file for this project to the user's local repository
	    for download by other projects currently being executed on the user's
	    system.
	    ====================================================================-->
  <target name="publish-local-nojar" depends="install-ivy" description="Publishes the jar file to the local repository">
    <ivy:resolve file="${ivy.artifact.ivyfilename}" />
    <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
      <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>


  <!--=======================================================================
	    publish-local
	    
	    Builds and publishes the jar file for this project to the user's 
	    local repository for download by other projects currently being 
	    executed on the user's system.
	    ====================================================================-->
  <target name="publish-local"
          depends="dist, publish-local-nojar"
          description="Builds and publishes the jar file to the local repository" />


  <!--=======================================================================
        publish-pentaho
    
        Creates and publishes the jar file for this project to a Maven2 
        repository. 
        ====================================================================-->
  <target name="publish-pentaho"
          depends="dist, publish-pentaho-nojar"
          description="Builds and publishes the jar file to a Maven2 repository">
  </target>


  <!--=======================================================================
	    publish-pentaho-nojar
	    
	    Publishes the jar file for this project to a Maven2 repository.
	    ====================================================================-->
  <target name="publish-pentaho-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver"
          description="Publishes the jar file to a Maven2 repository">
    <antcall target="maven-publish-dependencies">
      <param name="publish.groupId" value="${ivy.artifact.group}" />
      <param name="publish.artifactId" value="${ivy.artifact.id}" />
      <param name="publish.version" value="${project.revision}" />
      <param name="publish.file" value="${ivy.artifact.ivypathname}" />
    </antcall>

    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="${ivy.artifact.pomfile}" />
      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
    </antcall>
  </target>


  <!--=======================================================================
        ivy.deliver
    
        Creates a publishable version of the ivy dependencies file, ivy.xml
        ====================================================================-->
  <target name="ivy.deliver" depends="install-ivy,init,resolve">
    <ivy:deliver conf="*(public)" deliverpattern="${dist.dir}/ivy.xml" />
  </target>


  <!--=======================================================================
	    maven-publish-dependencies
	    
	    A function that deploys an ivy.xml file to a maven repository
	    ====================================================================-->
  <target name="maven-publish-dependencies" description="A function that deploys an ivy.xml file to a maven repository">
    <sequential>
      <fail message="No file found at: ${publish.file}">
        <condition>
          <not>
            <available file="${publish.file}" />
          </not>
        </condition>
      </fail>
      <echo message="Publishing ${publish.file} to ${ivy.repository.publish}..." />
      <if>
        <isset property="isWindows" />
        <then>
          <exec executable="cmd">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DgroupId=${publish.groupId}" />
            <arg value="-DartifactId=${publish.artifactId}" />
            <arg value="-Dversion=${publish.version}" />
            <arg value="-Dpackaging=ivy.xml" />
            <arg value="-Dfile=${publish.file}" />
          </exec>
        </then>
        <else>
          <exec executable="mvn">
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DgroupId=${publish.groupId}" />
            <arg value="-DartifactId=${publish.artifactId}" />
            <arg value="-Dversion=${publish.version}" />
            <arg value="-Dpackaging=ivy.xml" />
            <arg value="-Dfile=${publish.file}" />
          </exec>
        </else>
      </if>
    </sequential>
  </target>


  <!--=======================================================================
	    maven-publish-artifact
	    
	    A function that deploys an artifact to a maven repository
	    ====================================================================-->
  <target name="maven-publish-artifact">
    <sequential>
      <fail message="No file found at: ${publish.file}">
        <condition>
          <not>
            <available file="${publish.file}" />
          </not>
        </condition>
      </fail>
      <echo message="Publishing ${publish.file} to ${ivy.repository.publish}..." />
      <if>
        <isset property="isWindows" />
        <then>
          <exec executable="cmd">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DpomFile=${publish.pomFile}" />
            <arg value="-Dfile=${publish.file}" />
          </exec>
        </then>
        <else>
          <exec executable="mvn">
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DpomFile=${publish.pomFile}" />
            <arg value="-Dfile=${publish.file}" />
          </exec>
        </else>
      </if>
    </sequential>
  </target>

  <!--=======================================================================
	    create-pom
	    
	    Creates the POM file for publishing the jar file to a Maven2 repository.
	    ====================================================================-->
  <target name="create-pom" depends="install-ivy" description="Creates a POM file based on the ivy dependencies">
    <ivy:makepom ivyfile="./ivy.xml" pomfile="${dist.dir}/pom.xml">
      <mapping conf="default" scope="compile" />
      <mapping conf="runtime" scope="runtime" />
    </ivy:makepom>
  </target>


  <!--=======================================================================
	    clean-jars
	    
	    Removes all the libraries that have been downloaded for this project
	    using the ivy dependencies.
	    ====================================================================-->
  <target name="clean-jars" description="Cleans the libraries that have been downloaded">
    <delete dir="${lib.dir}" />
    <delete dir="${testlib.dir}" />
  </target>


  <!--=======================================================================
	    clean
	    
	    Removes all the files generated from the build process.
	    ====================================================================-->
  <target name="clean"
          description="Cleans all the files generated from a build with the exception of IVY-downloaded jars (see clean-all)"
          depends="clean-tests, clean-cobertura, clean-javadoc, clean-dist">
    <delete dir="${classes.dir}" />
    <delete dir="${bin.dir}" />
  </target>


  <!--=======================================================================
	    clean-dist
	    
	    Removes all dist artifacts
	    ====================================================================-->
  <target name="clean-dist" description="Removes all dist artifacts">
    <delete dir="${dist.dir}" />
  </target>


  <!--=======================================================================
	    clean-all
	    
	    Removes all the libraries that have been downloaded for this project
	    in the workspace's lib dirs as well as all the files 
	    generated from the build process.
	    ====================================================================-->
  <target name="clean-all" depends="clean,clean-jars" description="Cleans all the generated and dependency files" />


  <!--=======================================================================
	    copy-license-lgpl
	    
	    Copies the LGPL license file into the binary directory.
	    ====================================================================-->
  <target name="copy-license-lgpl"
          if="lgpl-license-avail"
          description="Copies the LGPL license file into the bin directory">
    <copy todir="${classes.dir}/META-INF">
      <fileset dir="${license.dir}" includes="lgpl-2.1.txt" />
    </copy>
  </target>


  <!--=======================================================================
	    copy-license-gpl-parent
	    
	    Copies the GPL license file from the parent directory into the 
	    binary directory.
	    ====================================================================-->
  <target name="copy-license-gpl-parent"
          if="gpl-parent-license-avail"
          description="Copies the parent's GPL license file into the bin directory">
    <copy todir="${classes.dir}/META-INF">
      <fileset dir="../.." includes="gpl-2.0.txt" />
    </copy>
  </target>


  <!--=======================================================================
	    compile
	    
	    Compiles the source code (using the specified options) into the 
	    binary directory.
	    
	    NOTE: This contains multiple sub-tasks which will occur in the 
	          following order (this is provided for easier overriding by
	          the build.xml which will include this file)...
	      - compile.pre      : anything needed to prep for compile
	      - compile.compile  : the actual compilation step
	      - compile.src_copy : copying the source into the bin directory
	      - compile.res_copy : copying the resources into the bin directory
	      - compile.lic_copy : copying the license information into the bin directory
	      - compile.post     : anything needed after the compile is done 
	    ====================================================================-->
  <target name="compile"
          depends="init, compile.pre, compile.compile, compile.src_copy, compile.res_copy, compile.lic_copy, compile.post"
          description="Performs all the steps to prepare the bin directory with a complete compilation" />


  <!--=======================================================================
	    compile.pre
	    
	    Prepares to perform the compile.
	    ====================================================================-->
  <target name="compile.pre" description="Prepares the compile" />


  <!--=======================================================================
	    compile.compile
	    
	    Performs the actual compile
	    ====================================================================-->
  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath" />
      </classpath>
      <src path="${src.dir}" />
    </javac>
  </target>


  <!--=======================================================================
	    compile.res_copy
	    
	    Copies any needed resources into the classes directory.  Will not
	    duplicate copying of resources from src tree (handled by compile.src_copy
	    if jar.include.source is set.
	    ====================================================================-->
  <target name="compile.res_copy" depends="install-antcontrib">
    <if>
      <available file="${res.dir}" />
      <then>
        <copy todir="${classes.dir}">
          <fileset dir="${res.dir}" />
        </copy>
      </then>
    </if>

    <if>
      <not>
        <isset property="jar.include.source" />
      </not>
      <then>
        <copy todir="${classes.dir}" flatten="false">
          <fileset dir="${src.dir}" excludes="**/*.java" />
        </copy>
      </then>
    </if>
  </target>


  <!--=======================================================================
	    compile.src_copy
	    
	    Copies the source files to the bin directory
	    NOTE: if the dont.copy.source variable exists, this step will be
	          skipped!
	    ====================================================================-->
  <target name="compile.src_copy"
          depends="init"
          if="jar.include.source"
          description="Copies the source to the bin directory">
    <copy todir="${classes.dir}" flatten="false">
      <fileset dir="${src.dir}" />
    </copy>
  </target>


  <!--=======================================================================
	    compile.lic_copy
	    
	    Copies the license file(s) into the bin directory
	    ====================================================================-->
  <target name="compile.lic_copy" depends="init" description="Copies the required license file to the bin directory">
    <condition property="lgpl-license-avail">
      <available file="${license.dir}/lgpl-2.1.txt" />
    </condition>
    <antcall target="copy-license-lgpl" />
    <condition property="gpl-parent-license-avail">
      <available file="../../gpl-2.0.txt" />
    </condition>
    <antcall target="copy-license-gpl-parent" />
  </target>


  <!--=======================================================================
	    compile.post
	    
	    Performs any needed post-compile tasks
	    ====================================================================-->
  <target name="compile.post" description="Post compilation tasks" />


  <!--=======================================================================
	    jar
	    
	    Creates a jar file from the bin directory
	    ====================================================================-->
  <target name="jar" depends="compile,svn-revision" description="Jars up the bin directory after a compile">
    <jar destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar">
      <manifest>
        <attribute name="Implementation-Title" value="${impl.title}" />
        <attribute name="Implementation-Version" value="${project.revision}.${svn.revision}" />
        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
        <attribute name="Implementation-ProductID" value="${impl.productID}" />
      </manifest>
      <fileset dir="${classes.dir}" />
    </jar>
  </target>


  <!--=======================================================================
	    dist-source
	    
	    Generates zip and targz distributions of the javadoc
	    ====================================================================-->
  <target name="dist-source"
          depends="source.zip, source.targz"
          description="Generates zip and targz distributions of the project source" />


  <!--=======================================================================
	    source.zip
	    
	    Creates a zip of the project source for distribution
	    ====================================================================-->
  <target name="source.zip" depends="init">
    <jar jarfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.zip" basedir="${src.dir}" />
  </target>


  <!--=======================================================================
	    source.targz
	    
	    Creates a gzipped tar of the project source for distribution
	    ====================================================================-->
  <target name="source.targz" depends="init">
    <tar compression="gzip"
         destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.tar.gz"
         basedir="${src.dir}" />
  </target>


  <!--=======================================================================
	    clean-tests
	    
	    Removes all files related to tests
	    ====================================================================-->
  <target name="clean-tests">
    <delete dir="${testbin.dir}" />
  </target>


  <!--=======================================================================
	    init-tests
	    
	    Compiles project test source
	    ====================================================================-->
  <target name="init-tests" depends="clean-tests">
    <mkdir dir="${testclasses.dir}" />
    <mkdir dir="${testsrc.dir}" />
  </target>


  <!--=======================================================================
	    compile-tests
	    
	    Compiles project test source
	    ====================================================================-->
  <target name="compile-tests" depends="init-tests" description="Compiles project test source">
    <javac destdir="${testclasses.dir}"
           debug="true"
           optimize="false"
           source="${javac.source}"
           target="${javac.target}"
           fork="true">
      <src path="${testsrc.dir}" />
      <classpath refid="test.classpath" />
    </javac>

    <!-- Copy the non-java files from the source directory to the test classes directory -->
    <copy todir="${testclasses.dir}">
      <fileset dir="${testsrc.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
  </target>


  <!--=======================================================================
	    test
	    
	    Compiles and runs all the tests for the project
	    ====================================================================-->
  <target name="test" depends="compile,compile-tests" description="Compiles and runs unit tests">
    <junit printsummary="yes" haltonfailure="${junit.haltonfailure}">
      <classpath refid="test.classpath" />
      <formatter type="plain" />
      <batchtest fork="yes" todir="${testbin.dir}">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!--=======================================================================
		clean-test-reports

		Remove all xml and html JUnit test reports
		====================================================================-->
  <target name="clean-test-reports">
    <delete dir="${testreports.xml.dir}" />
    <delete dir="${testreports.html.dir}" />
  </target>


  <!--=======================================================================
		init-test-reports

		Prepare directories for JUnit test reports
		====================================================================-->
  <target name="init-test-reports" depends="clean-test-reports">
    <mkdir dir="${testreports.xml.dir}" />
    <mkdir dir="${testreports.html.dir}" />
  </target>

  <!--=======================================================================
	    dist
	    
	    Creates a distribution of this project
	    ====================================================================-->
  <target name="dist" depends="jar" description="Creates a distribution" />


  <!--=======================================================================
	    continuous
	    
	    Runs a typical continuous integration build including project dist, javadoc, test, 
	    and coverage artifacts
	    ====================================================================-->
  <target name="continuous"
          depends="clean-all,resolve,cobertura,dist-javadoc,dist-source,dist"
          description="Runs a typical continuous integration build" />


  <!--=======================================================================
	    continuous-testless
	    
	    Runs a typical continuous integration build including project dist, javadoc, test, 
	    and coverage artifacts
	    ====================================================================-->
  <target name="continuous-testless"
          depends="clean-all,resolve,dist-javadoc,dist-source,dist"
          description="Runs a typical testless continuous integration build" />


  <!--=======================================================================
	    continuous-lite
	    
	    Runs a lightweight continuous integration build, producing no artifacts for distrubution.
	    ====================================================================-->
  <target name="continuous-lite"
          depends="clean-all,resolve,cobertura,javadoc"
          description="Runs a lightweight continuous integration build." />


  <!--=======================================================================
	    javadoc
	    
	    Generates javadoc source documentation for this project
	    ====================================================================-->
  <target name="javadoc"
          depends="javadoc.init, compile"
          description="Generates javadoc source documentation for this project">
    <javadoc destdir="${javadoc.dir}/docs/api"
             access="public"
             source="1.5"
             use="true"
             notree="false"
             nonavbar="false"
             noindex="false"
             splitindex="true"
             author="true"
             version="true"
             maxmemory="256M"
             nodeprecatedlist="false"
             nodeprecated="false"
             packagenames="${javadoc.packagenames}"
             sourcepath="${src.dir}"
             doctitle="${impl.title} documentation">
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <classpath refid="classpath" />
    </javadoc>
  </target>


  <!--=======================================================================
	    dist-javadoc
	    
	    Generates zip and targz distributions of the javadoc
	    ====================================================================-->
  <target name="dist-javadoc"
          depends="javadoc.zip, javadoc.targz"
          description="Generates zip and targz distributions of the javadoc" />


  <!--=======================================================================
	    clean-javadoc
	    
	    Removes generated javadoc files (note, this does not remove javadoc distributions.
	    Use clean-dist to remove artifacts from the dist.dir.
	    ====================================================================-->
  <target name="clean-javadoc" description="Removes non-dist generated javadoc files">
    <delete dir="${javadoc.dir}" />
  </target>


  <!--=======================================================================
	    javadoc.init
	    
	    Creates directories for javadoc process
	    ====================================================================-->
  <target name="javadoc.init" depends="clean-javadoc">
    <mkdir dir="${javadoc.dir}" />
  </target>


  <!--=======================================================================
	    javadoc.zip
	    
	    Creates a zip of the javadoc for distribution
	    ====================================================================-->
  <target name="javadoc.zip" depends="javadoc">
    <jar jarfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-javadoc.zip"
         basedir="${javadoc.dir}"
         includes="**/*"
         excludes="**/Thumbs.db" />
  </target>


  <!--=======================================================================
	    javadoc.targz
	    
	    Creates a gzipped tar of the javadoc for distribution
	    ====================================================================-->
  <target name="javadoc.targz" depends="javadoc">
    <tar compression="gzip"
         destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-javadoc.tar.gz"
         basedir="${javadoc.dir}"
         includes="**/*"
         excludes="**/Thumbs.db" />
  </target>


  <!--=======================================================================
	    cobertura
	    
	    Runs tests in an instrumented environment and produces Cobertura test coverage reports
	    ====================================================================-->
  <target name="cobertura"
          depends="clean-cobertura,cobertura.install,compile,compile-tests,cobertura.instrument-classes,cobertura.test-instrumented,cobertura.xml-report,cobertura.html-report"
          description="Compile, instrument classes, run the tests and generate Cobertura coverage reports." />


  <!--=======================================================================
	    cobertura.instrument-classes
	    
	    Instruments the application classes used by Cobertura during cobertura.test-instrumented
	    ====================================================================-->
  <target name="cobertura.instrument-classes" depends="cobertura.clean-instrumented-classes,cobertura.install,compile">
    <cobertura-instrument todir="${instrumented.classes.dir}" datafile="${cobertura.data.dir}/cobertura.ser">
      <ignore regex="org.apache.log4j.*" />
      <fileset dir="${classes.dir}">
        <!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>

    </cobertura-instrument>
  </target>


  <!--=======================================================================
	    cobertura.install
	    
	    Downloads and installs Cobertura ant tasks
	    ====================================================================-->
  <target name="cobertura.install" depends="cobertura.download">
    <path id="cobertura.classpath">
      <fileset dir="${cobertura.build.cache.dir}">
        <include name="*.jar" />
      </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
  </target>


  <!--=======================================================================
	    cobertura.download-check
	    
	    Fetches Cobertura from sourceforge if it is not already present
	    ====================================================================-->
  <target name="cobertura.download-check">
    <condition property="cobertura.available">
      <and>
        <available file="${cobertura.build.cache.dir}" />
        <available classname="net.sourceforge.cobertura.ant.InstrumentTask">
          <classpath>
            <fileset dir="${cobertura.build.cache.dir}">
              <include name="*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="cobertura.download" />
  </target>

  <!--=======================================================================
	    cobertura.download
	    
	    Retrieves Cobertura jar via IVY
	    ====================================================================-->
  <target name="cobertura.download" depends="install-ivy" unless="cobertura.available">
    <ivy:retrieve inline="true"
                  organisation="net.sourceforge.cobertura"
                  module="cobertura"
                  revision="1.9"
                  pattern="${cobertura.build.cache.dir}/[module].[ext]" />
  </target>


  <!--=======================================================================
	    clean-cobertura
	    
	    Removes all files created by Cobertura code coverage utility
	    ====================================================================-->
  <target name="clean-cobertura"
          depends="cobertura.clean-instrumented-classes,cobertura.clean-coverage-reports"
          description="Removes all files created by Cobertura code coverage utility.">
    <delete dir="${cobertura.data.dir}" />
  </target>


  <!--=======================================================================
		cobertura.clean-instrumented-classes

		Remove the instrumented classes used by Cobertura
		====================================================================-->
  <target name="cobertura.clean-instrumented-classes">
    <delete dir="${instrumented.classes.dir}" />
  </target>


  <!--=======================================================================
		cobertura.clean-coverage-reports

		Remove all xml and html Cobertura coverage reports
		====================================================================-->
  <target name="cobertura.clean-coverage-reports">
    <delete dir="${coberturareports.xml.dir}" />
    <delete dir="${coberturareports.html.dir}" />
    <delete dir="${coberturareports.dir}" />
  </target>


  <!--=======================================================================
	    cobertura.test-instrumented
	    
	    Runs tests against instrumented classes and generates xml and html JUnit test reports
	    ====================================================================-->
  <target name="cobertura.test-instrumented"
          depends="init-test-reports,cobertura.install,compile,compile-tests,cobertura.instrument-classes">
    <mkdir dir="${instrumented.classes.dir}" />
    <junit fork="yes" failureProperty="test.failed" haltonfailure="${junit.haltonfailure}">

      <!--
				Specify the name of the coverage data file to use.
			-->
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.dir}/cobertura.ser" />

      <!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
      <classpath location="${instrumented.classes.dir}" />
      <classpath location="${classes.dir}" />
      <classpath location="${testclasses.dir}" />
      <classpath refid="test.classpath" />
      <classpath refid="cobertura.classpath" />

      <formatter type="xml" />
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase" />
      <batchtest todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="**/*Test.java" />
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${testreports.html.dir}" />
    </junitreport>
  </target>


  <!--=======================================================================
	    cobertura.xml-report
	    
	    Produces machine-readable xml Cobertura coverage report from results of instrumented tests
	    ====================================================================-->
  <target name="cobertura.xml-report" depends="cobertura.test-instrumented">
    <cobertura-report destdir="${coberturareports.xml.dir}" datafile="${cobertura.data.dir}/cobertura.ser" format="xml">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>


  <!--=======================================================================
	    cobertura.html-report
	    
	    Produces human-readable html Cobertura coverage report from results of instrumented tests
	    ====================================================================-->
  <target name="cobertura.html-report" depends="cobertura.test-instrumented">
    <cobertura-report destdir="${coberturareports.html.dir}"
                      datafile="${cobertura.data.dir}/cobertura.ser"
                      format="html">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>

  <!--=======================================================================
        install-pentaho-ant-tasks
 
        Fetches and installs Pentaho Ant tasks
      ====================================================================-->
  <target name="install-pentaho-ant-tasks" depends="install-ivy">
    <ivy:retrieve inline="true"
                  organisation="pentaho"
                  module="pentaho-ant-tasks"
                  revision="1.1"
                  pattern="${pentaho.build.cache.dir}/[module].[ext]" />
    <path id="pentaho-ant-tasks.classpath">
      <fileset dir="${pentaho.build.cache.dir}">
        <include name="*.jar" />
      </fileset>
    </path>
    <taskdef name="dot-classpath"
             description="Builds Eclipse .classpath from ANT classpath"
             classname="org.pentaho.anttasks.DotClasspath"
             classpathref="pentaho-ant-tasks.classpath">
    </taskdef>
  </target>

  <!--=======================================================================
        create-dot-classpath
 
        Creates the Eclipse .classpath file from the resolved
        classpath from Ant.
      ====================================================================-->
  <target name="create-dot-classpath"
          depends="install-pentaho-ant-tasks,init"
          description="Creates the Eclipse .classpath file">
    <dot-classpath>
      <!-- Include all lib dirs -->
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${devlib.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${testlib.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </dot-classpath>
  </target>

</project>