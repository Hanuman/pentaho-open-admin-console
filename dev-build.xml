<?xml version="1.0" encoding="UTF-8"?>
<project name="{module}" default="deploy" basedir=".">
	<description>Pentaho Administration Console Development build process..</description>
	<property file="override.properties" />
	<property file="version.properties" />
	<property file="build.properties" />


  	<path id="classpath">
		<fileset dir="lib">
		  <include name="**/*.jar" />
		  <include name="**/*.zip" />
		</fileset>
    </path>
	<!-- ===================================================================
        target: init              
       =================================================================== -->
	<target name="init">
		<mkdir dir="bin" />
		<copy todir="bin">
			<fileset dir="src" includes="**/*.png" />
			<fileset dir="src" includes="**/*.jpg" />
			<fileset dir="src" includes="**/*.gif" />
			<fileset dir="src" includes="**/*.properties" />
			<fileset dir="src" includes="**/*.xml" />
		</copy>
	</target>
	

	<!-- ===================================================================
		 target: init-lib
		 
		 Description:
		 - Creates the ${build.lib.dir}
		 - Copies and flattens ${lib}
		         
		 =================================================================== -->
	<target name="init-lib">
		<mkdir dir="${build.lib.dir}" />

		<copy todir="${build.lib.dir}" flatten="true" includeEmptyDirs="false" overwrite="true">
			<fileset dir="${lib}" includes="**/*.jar">
				<!-- exclude name="**/portal-core-lib.jar" />
				<exclude name="**/portal-portlet-lib.jar" />
				<exclude name="**/portal-security-lib.jar" / -->
			</fileset>
		</copy>
	</target>
	
	<!-- ===================================================================
        target: init-pentaho-open-admin-console-classes
       =================================================================== -->
	<target name="init-pentaho-open-admin-console-classes">
		<mkdir dir="${build.classes.dir}" />
		<echo message="javac.path=${javac.path}" />
	</target>
	
	
	<!-- ===================================================================
		 target: init-pentaho-open-admin-console-wars
		 =================================================================== -->
	<target name="init-pentaho-open-admin-console-wars">
		<mkdir dir="${build.wars.dir}" />
	</target>
	
	<!-- ===================================================================
        target: clean              
    =================================================================== -->
	
	<target name="clean" depends="clean-test"
	   description="deletes all generated files">
	    <delete dir=".gwt-cache"/> <!-- generated by GWT -->
	    <delete dir="${build.dir}"/> <!-- generated by the prepare target -->
	    <delete dir="tomcat"/> <!-- generated by GWT -->
	</target>
	<!-- ===================================================================
        target: clean-test              
    =================================================================== -->

	<target name="clean-test" description="deletes all generated test files">
	    <delete dir="test"/>
	</target>
	<!-- ===================================================================
        target: compile              
    =================================================================== -->
	
	 <target name="compile" depends="prepare"
	    description="compiles Java source files to bytecode">
	    <javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="${debug}" optimize="${optimize}" deprecation="${deprecation}" compiler="modern" source="1.5" target="1.5" fork="true"  classpathref="classpath">
	    </javac>
		<!-- Now add *.properties -->
		<copy todir="${build.classes.dir}">
			<fileset dir="${src.dir}" excludes="**/*.java">
				<include name="**/locale/**" />
				<include name="**/*.cfg.xml" />
				<include name="**/*.hbm.xml" />
				<include name="**/*.ftl" />
				<include name="*.properties" />			
			</fileset>
		</copy>
	 </target>
	<!-- ===================================================================
        target: init-pentaho-open-admin-console-jars
       =================================================================== -->
	<target name="init-pentaho-open-admin-console-jars">
		<mkdir dir="${build.jars.dir}" />
	</target>
	<!-- ===================================================================
        target: compile-pac
       =================================================================== -->
	<target name="compile-pac" depends="compile">
		<java classname="com.google.gwt.dev.GWTCompiler" fork="true" failonerror="true" maxmemory="512M">
			<classpath>
				<path refid="classpath" />
				<pathelement location="src" />
			</classpath>
			<arg value="-out" />
			<arg value="&quot;${gwt.output.dir}&quot;" />
			<arg value="%*" />
			<arg value="${pac.app}" />
		</java>
	</target>	
	
	<!-- =================================
          target: jar-pentaho-open-admin-console

          Jar the org/pentaho/pac package.
         ================================= -->
	<target name="jar-pentaho-open-admin-console" depends="init-pentaho-open-admin-console-jars,init-pentaho-open-admin-console-classes,compile-pac">
		<jar destfile="${build.jars.dir}/pentaho-open-admin-console.jar">
			<manifest>
				<attribute name="Implementation-Title" value="${impl.title}" />
				<attribute name="Implementation-Version" value="${impl.version}" />
				<attribute name="Implementation-Vendor" value="${impl.vendor}" />
				<attribute name="Implementation-ProductID" value="${impl.productID}" />
			</manifest>
			<fileset dir="${build.classes.dir}">
				<!-- include only core -->
				<include name="**/*.class" />
			</fileset>
		</jar>
	</target>

	<!-- =================================
		 target: deploy

		 deploy pac.war to the server
		 ================================= -->
	  <target name="deploy" depends="war,undeploy"
	    description="deploys the war file to Tomcat">
		<copy toDir="${target.server.dir}">
			<fileset dir="${source.server.dir}" />
		</copy>	  	
	    <copy file="${build.wars.dir}/${war}" todir="${target.server.dir}/webapps"/>
		<replace file="${target.server.dir}/bin/catalina.bat" token="set JAVA_OPTS=%JAVA_OPTS%">
			<replacevalue>
				<![CDATA[set JAVA_OPTS=%JAVA_OPTS% -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file="%CATALINA_BASE%\conf\logging.properties" -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port="9004" -Dcom.sun.management.jmxremote.authenticate="false" -Dcom.sun.management.jmxremote.ssl="false"]]>
			</replacevalue>
		</replace>	  	
	    <echo>browse ${url}</echo>
	  </target>
	<!-- =================================
		 target: hosted

		 Runs application in a hosted mode
		 ================================= -->

	  <target name="hosted" depends="compile"
	    description="runs the application in hosted mode">
	    <java classname="com.google.gwt.dev.GWTShell"
	      classpathref="classpath" fork="true">
	      <!-- next line is only for Mac OS X -->
	      <jvmarg value="-XstartOnFirstThread"/>
	      <arg line="-out ./www"/>
	      <arg line="${pac.app}/$PentahoAdminConsole.html"/>
	    </java>
	  </target>
	<!-- =================================
		 target: prepare
		 ================================= -->
	  <target name="prepare" description="creates output directories">
	    <mkdir dir="${build.dir}"/>
	  </target>
	<!-- =================================
		 target: prepare
		 ================================= -->

	  <target name="test" depends="clean-test,compile"
	    description="runs all JUnit tests">
	    <mkdir dir="test"/>
	    <junit fork="yes" printsummary="yes">
	      <!-- next line is only for Mac OS X -->
	      <jvmarg value="-XstartOnFirstThread"/>
	      <classpath refid="classpath"/>
	      <batchtest todir="test">
	        <fileset dir="src" includes="**/${test}Test.java"/>
	      </batchtest>
	      <formatter type="xml"/>
	    </junit>
	    <junitreport toDir="test">
	      <fileset dir="test"/>
	      <report format="frames" todir="test"/>
	    </junitreport>
	    <exec os="Windows" executable="cmd.exe">
	      <arg line="/c start test/index.html"/>
	    </exec>
	    <exec os="Mac OS X" executable="open">
	      <arg line="-a /Applications/Safari.app test/index.html"/>
	    </exec>
	  </target>
	<!-- =================================
		 target: undeploy
		 ================================= -->

	  <target name="undeploy" description="undeploys the web app. from Tomcat">
	    <delete dir="${target.server.dir}/webapps/${application.name}"/>
	    <delete file="${target.server.dir}/webapps/${war}"/>
	  </target>
	<!-- =================================
		 target: undeploy
		 ================================= -->
	  <target name="war" depends="init-pentaho-open-admin-console-wars, init-lib, jar-pentaho-open-admin-console"  description="builds the war file">
	    <delete file="${build.wars.dir}/${war}"/>
	    <war warfile="${build.wars.dir}/${war}" webxml="web.xml">
	      <!-- generated HTML/JavaScript plus your CSS -->
	      <fileset dir="${gwt.output.dir}"/>
	  	  <classes dir="${build.classes.dir}" includes="**/*.ftl"/>
	      <classes dir="${build.classes.dir}" includes="**/locale/**"/>
	      <classes dir="${server.resource.dir}/hibernate/${rdbms}" includes="**/*.xml"/>
	      <classes dir="${build.classes.dir}" includes="*.properties"/>	    	
<!-- 	      <lib dir="${lib}/jdbc/${rdbms}"/>	    	-->
	      <lib dir="${build.jars.dir}"/>    	
	      <!-- supplied JAR -->
	      <lib dir="${build.lib.dir}" />
	      <lib file="${gwt.dir}/gwt-servlet.jar"/>
	    </war>
	  </target>
	<!-- =================================
		 target: tomcat-start
		 ================================= -->
	  <target name="tomcat-start">
		    <java jar="${target.server.dir}/bin/bootstrap.jar" fork="true">
		        <jvmarg value="-Dcatalina.home=${target.server.dir}"/>
		    </java>
	  </target>
	<!-- =================================
		 target: tomcat-stop
		 ================================= -->
	  <target name="tomcat-stop">
		    <java jar="${target.server.dir}/bin/bootstrap.jar" fork="true">
		        <jvmarg value="-Dcatalina.home=${target.server.dir}"/>
		        <arg line="stop"/>
		    </java>
	  </target>
	<!-- =================================
		 target: tomcat-start-debug
		 ================================= -->	
	  <target name="tomcat-start-debug">
		    <java jar="${target.server.dir}/bin/bootstrap.jar" fork="true">
		        <jvmarg value="-Dcatalina.home=${target.server.dir}"/>
		        <jvmarg value="-Xdebug"/>
		        <jvmarg
			value="-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"/>
		    </java>	
	  </target>
</project>