<!--===========================================================================
    GWT_COMMON_BUILD.XML
    
    This is the build file that is used across all GWT-based Pentaho projects.
    It is based on COMMON_BUILD.XML which is imported by this file. 
============================================================================-->
<project name="Pentaho GWT Common Build" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This is the common build for Pentaho GWT projects
  </description>

  <!-- Define the default location of the common build file -->
  <property name="common.build.file"
            value="./common_build.xml"
            description="This is the location of the standardized common_build.xml file" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="${common.build.file}" />

  <property name="gwt.output.dir"
            value="${bin.dir}/gwt/output"
            description="Base directory that holds all gwt generated files" />
  <property name="gwt-dev.revision" value="1.5.2" description="The release of GWT-dev to download and install" />
  <property name="gwt-log-level" value="INFO" description="The log level for GWT Compile" />
  <property name="gwt-style" value="OBF" description="Style in which javascript should be generated, options include OBF[uscated], PRETTY, and DETAILED"/>
  <property name="gwt-dev.zipfile"
            value="${devlib.dir}/gwt-dev-libs.zip"
            description="The download location of the GWT-dev zip file" />
  <property name="gwt-dev.jarfile"
            value="${devlib.dir}/gwt-dev-${gwt-dev.revision}.jar"
            description="The download location of the GWT-dev jar file" />
  <property name="gwt.package.artifact.id"
            value="${ivy.artifact.id}-package"
            description="The name of the GWT package artifact" />
  <property name="gwt.package.artifact.ivyfile" value="${basedir}/package-ivy.xml" />
  <property name="gwt.package.artifact.pomfile" value="${dist.dir}/package-pom.xml" />
  <property name="gwt.package.zipfile" value="${dist.dir}/${gwt.package.artifact.id}-${project.revision}.zip" />
  <property name="codegenlib.dir"
            value="${basedir}/codegen-lib"
            description="Location of the libraries needed for code generation" />
  <property name="gwt-compile.maxmemory" value="512M" description="maxmemory argument for com.google.gwt.dev.GWTCompiler java task" />
  <property name="gwt-compile.localWorkers" value="4" description="number of threads to use for running parallel compilation" />
  <property name="gwt-compile.maxstack" value="1024k" description="vm stack size setting" />

	<path id="classpath">
    <fileset dir="${codegenlib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${devlib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <pathelement path="${src.dir}" />
  </path>	
	
  <!--=======================================================================
	    init (override)
	    
	    ====================================================================-->
  <target name="init" description="Initializes the build process">
    <mkdir dir="${codegenlib.dir}" />
    <ant antfile="${common.build.file}" target="init" />
  </target>



  <!--=======================================================================
	    clean (override)
	    
	    Removes all the files generated from the build process.
	    ====================================================================-->
  <target name="clean"
          description="Cleans all the files generated from a build with the exception of IVY-downloaded jars (see clean-all)">
    <ant antfile="${common.build.file}" target="clean" />
    <delete file="${bin.dir}/.gwtBuild*" />
  </target>


  <!--=======================================================================
      resolve (override)
      
      Override to include resolution of IVY codegen and runtime configurations
      ====================================================================-->
  <target name="resolve" depends="resolve-codegen,resolve-runtime" description="Resolves all IVY configurations">
    <ant antfile="${common.build.file}" target="resolve" />
  </target>


  <!--=======================================================================
      resolve-codgen (override)
      
      Override to use OS-specific IVY configurations
      ====================================================================-->
  <target name="resolve-codegen" depends="resolve-init" description="Resolves all OS-specific codegen configurations">
    <ivy:resolve file="ivy.xml" conf="codegen-${os.classifier}" />
    <ivy:retrieve conf="codegen-${os.classifier}" pattern="${codegenlib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>


  <!--=======================================================================
      gwt-compile
      
      Performs GWT Compile which generates JavaScript
      ====================================================================-->
  <target name="gwt-compile"
          depends="gwt-compile.check, init"
          unless="gwtBuild.notRequired"
          description="Perform GWT Compile">
    <java classname="com.google.gwt.dev.Compiler" fork="true" failonerror="true" maxmemory="${gwt-compile.maxmemory}">
 	  <classpath refid="classpath"/>
      <jvmarg value="-Xss${gwt-compile.maxstack}"/>    	
      <arg value="-war" />
      <arg value="${gwt.output.dir}" />
      <arg value="${gwt-module.path}" />
      <arg value="-localWorkers" />
      <arg value="${gwt-compile.localWorkers}" />
      <arg value="-logLevel" />
      <arg value="${gwt-log-level}" />
      <arg value="-style" />
      <arg value="${gwt-style}" />
    </java>
    <touch file="${bin.dir}/.gwtBuild-${gwt-module.path}" />
  </target>

  
  <!--=======================================================================
      gwt-compile.check
      
      Detects changes in source since the last gwt-compile and sets a flag
      so gwt-compile can skip when nothing has changed
      ====================================================================-->
  <target name="gwt-compile.check">
    <uptodate property="gwtBuild.notRequired" targetfile="${bin.dir}/.gwtBuild-${gwt-module.path}">
      <srcfiles dir="${src.dir}" />
    </uptodate>
  </target>


  <!--=======================================================================
      dist (override)
      
      Defines the default distribution process
      ====================================================================-->
  <target name="dist" depends="jar, gwt-package" description="Creates distribution including GWT output" />


  <!--=======================================================================
	    create-pom (override)
	    
	    Creates the POM files for publishing the jar and gwt zip package to the Maven repository
	    ====================================================================-->
  <target name="create-pom" depends="install-ivy" description="Creates a POM file based on the ivy dependencies">
    <ant antfile="${common.build.file}" target="create-pom" />
    <antcall target="create-package-pom" />
  </target>


  <!--=======================================================================
	    create-package-pom 
	    
	    Creates a POM file based on the ivy dependencies
	    ====================================================================-->
  <target name="create-package-pom"
          depends="install-ivy"
          description="Creates a POM file based on the ivy dependencies for a separate package">
    <ivy:makepom ivyfile="${gwt.package.artifact.ivyfile}" pomfile="${gwt.package.artifact.pomfile}" />
    <replace file="${gwt.package.artifact.pomfile}" token="jar" value="zip" />
  </target>


  <!--=======================================================================
	    publish-pentaho-nojar (override)
	    
	    Publishes the jar and gwt zip package to the Maven repository
	    ====================================================================-->
  <target name="publish-pentaho-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver"
          description="Publishes the jar file to a Maven2 repository">
    <ant antfile="${common.build.file}" target="publish-pentaho-nojar" />

    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="${gwt.package.artifact.pomfile}" />
      <param name="publish.file" value="${gwt.package.zipfile}" />
    </antcall>
  </target>


  <!--=======================================================================
	    publish-local-nojar (override)
	    
	    Publishes jar and gwt zip package locally
	    ====================================================================-->
  <target name="publish-local-nojar" depends="install-ivy" description="Publishes the jar file to the local repository">
    <ant antfile="${common.build.file}" target="publish-local-nojar" />
    <ivy:resolve file="${gwt.package.artifact.ivyfile}" />
    <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
      <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>


  <!--=======================================================================
      gwt-package
      
      Packages the GWT output
      ====================================================================-->
  <target name="gwt-package" depends="gwt-compile" description="Packages the GWT output">
    <zip destfile="${gwt.package.zipfile}" basedir="${gwt.output.dir}" compress="true">
      <exclude name=".gwt-tmp/" />
      <exclude name="*-aux/" />
    </zip>
  </target>


  <!--=======================================================================
      install-gwt-dev
      
      Downloads and installs gwt-dev jars and native libraries
      ====================================================================-->
  <target name="install-gwt-dev" depends="gwt-dev.download" description="Installs gwt-dev jar and native libraries">
    <unzip src="${gwt-dev.zipfile}" dest="${devlib.dir}" />
    <delete file="${gwt-dev.zipfile}" />

    <echo>
      *************************************************************************************************
      ** Gwt dev files have been installed to ${devlib.dir}.
      ** Make sure ${gwt-dev.jarfile} 
      ** appears before other jars in your IDE's classpath, 
      ** otherwise running in hosted mode may fail.
      *************************************************************************************************
    </echo>
  </target>


  <!--=======================================================================
      gwt-dev.download
      
      Downloads GWT dev libraries if they don't already exist
      ====================================================================-->
  <target name="gwt-dev.download" depends="install-ivy,init">
    <condition property="maven.classifier" value="windows">
      <isset property="isWindows" />
    </condition>
    <condition property="maven.classifier" value="linux">
      <isset property="isLinux" />
    </condition>
    <condition property="maven.classifier" value="mac">
      <isset property="isMac" />
    </condition>

    <get src="http://repo1.maven.org/maven2/com/google/gwt/gwt-dev/1.5.2/gwt-dev-${gwt-dev.revision}-${maven.classifier}-libs.zip"
         dest="${gwt-dev.zipfile}" />
    <get src="http://repo1.maven.org/maven2/com/google/gwt/gwt-dev/1.5.2/gwt-dev-${gwt-dev.revision}-${maven.classifier}.jar"
         dest="${gwt-dev.jarfile}" />
  </target>

</project>
